<!DOCTYPE html>
<html>

<!-- *********************** HEAD *********************** -->
<head>
<style type="text/css">
.knitr .inline {
  background-color: #f7f7f7;
  border:solid 1px #B0B0B0;
}
.error {
	font-weight: bold;
	color: #FF0000;
}
.warning {
	font-weight: bold;
}
.message {
	font-style: italic;
}
.source, .output, .warning, .error, .message {
	padding: 0 1em;
  border:solid 1px #F7F7F7;
}
.source {
  background-color: #f5f5f5;
}
.rimage .left {
  text-align: left;
}
.rimage .right {
  text-align: right;
}
.rimage .center {
  text-align: center;
}
.hl.num {
  color: #AF0F91;
}
.hl.str {
  color: #317ECC;
}
.hl.com {
  color: #AD95AF;
  font-style: italic;
}
.hl.opt {
  color: #000000;
}
.hl.std {
  color: #585858;
}
.hl.kwa {
  color: #295F94;
  font-weight: bold;
}
.hl.kwb {
  color: #B05A65;
}
.hl.kwc {
  color: #55aa55;
}
.hl.kwd {
  color: #BC5A65;
  font-weight: bold;
}
</style>
<style type="text/css">
.knitr .inline {
  background-color: #f7f7f7;
  border:solid 1px #B0B0B0;
}
.error {
	font-weight: bold;
	color: #FF0000;
}
.warning {
	font-weight: bold;
}
.message {
	font-style: italic;
}
.source, .output, .warning, .error, .message {
	padding: 0 1em;
  border:solid 1px #F7F7F7;
}
.source {
  background-color: #f5f5f5;
}
.rimage .left {
  text-align: left;
}
.rimage .right {
  text-align: right;
}
.rimage .center {
  text-align: center;
}
.hl.num {
  color: #AF0F91;
}
.hl.str {
  color: #317ECC;
}
.hl.com {
  color: #AD95AF;
  font-style: italic;
}
.hl.opt {
  color: #000000;
}
.hl.std {
  color: #585858;
}
.hl.kwa {
  color: #295F94;
  font-weight: bold;
}
.hl.kwb {
  color: #B05A65;
}
.hl.kwc {
  color: #55aa55;
}
.hl.kwd {
  color: #BC5A65;
  font-weight: bold;
}
</style>
<style type="text/css">
.knitr .inline {
  background-color: #f7f7f7;
  border:solid #B0B0B0;
}
.error {
	font-weight: bold;
	color: #FF0000;
}
.warning {
	font-weight: bold;
}
.message {
	font-style: italic;
}
.source, .output, .warning, .error, .message {
	padding: 0 1em;
  border:solid 1px #F7F7F7;
}
.source {
  background-color: #e0ffff; /*#f5f5f5;*/
}

.output {
  background-color: #ffffe6; 
}

.rimage .left {
  text-align: left;
}
.rimage .right {
  text-align: right;
}
.rimage .center {
  text-align: center;
}
.hl.num {
  color: #AF0F91;
}
.hl.str {
  color: #317ECC;
}
.hl.com {
  color: #AD95AF;
  font-style: italic;
}
.hl.opt {
  color: #000000;
}

/* Font of variable names*/
.hl.std {
  color: #585858;
}
.hl.kwa {
  color: #295F94;
  font-weight: bold;
}
.hl.kwb {
  color: #B05A65;
}
.hl.kwc {
  color: #55aa55;
}
.hl.kwd {
  color: #BC5A65;
  font-weight: bold;
}
</style>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="author" content="Prof. Dr. Johannes Binswanger" />
 
<title>Programming for Practical Data Analysis</title>

<!-- ******* LIBRARIES AND PLUGINS ******* -->

<!-- my own css file -->
<link rel="stylesheet" href="css/baseline.css" type="text/css" />

<!-- jquery, nestedToc, slidesjs ... -->


<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

<script src="js/jquery-nestedToc.js">// get nestedToc from http://www.jqueryscript.net/menu/Dynamic-Table-of-Contents-Generator-With-jQuery-nestedToc.html
</script>

<script src="js/jquery.slides.min.js"></script>


</head>

<!-- *********************** END OF HEAD *********************** -->

<body>
<!-- ************************************** -->
<!-- AUTOMATIC INSERTION OF "BACK TO TOP"-->
<script>
// Select all headers to prepend "back to top" link.
// However, exclude the first heading, and the author and date
// Do so by creating a class noBackToTop. It is possible to assign multiple classes to an element.
// See http://stackoverflow.com/questions/3015103/jquery-exclude-elements-with-certain-class-in-selector

//NOTE: It is very important to use .before and not .prepend below!!!
// If you use prepend, the TOC gets screwed as the text shows up there as well!!

$(document).ready(function(){
	// Automatic "back to top" before a new heading, but not when the heading is of class noBackToTop, because 
	// there is immediately a subheading
    $(":header:not('.noBackToTop')").before("<p><a href='#docHeader'; style = 'font-size:1em; color: #A0A0A0'>[Back to top]</a></p>");
	// The back to top at the end of the document
	 $(".scriptText").append("<p><a href='#docHeader' style = 'font-size:1em; color: #A0A0A0'>[Back to top]</a></p>");
	 
	 //Horizontal ruler
	 $("h1:not('.noBackToTop')").before("<div class='markEnd'> </div>");
	 
	 
	
});


</script>



<!-- ************************************** 
     **************************************
	 **************************************
	 
-->








<div id="content">

<!-- *********************** TITLE ITEMS *********************** -->

<div id="docHeader">
    <p class="title">Programming for Practical Data Analysis</p>
    <h4 class="author noBackToTop"><em>Johannes Binswanger, University of St. Gallen</em></h4>
    <h4 class="date noBackToTop"><em>Fall 2016</em></h4>
</div> <!-- end of docHeader div -->



<!-- *********************** TABLE OF CONTENT (TOC) *********************** -->

<!-- This contains a toggle button 
and the table of content -->

<div class="tocContainer">
     
<script>
//jQuery code for toggle button
$( document ).ready( function( ) {
$( ".TOCbutton" ).click(function() {
  $( ".tocToggleContainer" ).toggle();
});
});
</script>

<!-- the button -->
<button class="TOCbutton" style="color: #27738C;font-size: 20px;">Show/hide table of content</button>




</div>

<div class="tocToggleContainer">
<!-- This div is empty, for the toggle -->
</div>

<!-- The following div below has the same class as the previous!! And do not forget to add the particular styling about display. Note that the second div contains another div that contains the toc. This is to keep both the toc and the toggle work. It may not be necessary with the particular toc solution chosen here, but it is necessary for other toc solutions.
-->
    <div class="tocToggleContainer" style="display: none">
    <div class = "toc">
        <script>
        // This script is simply copied from 
        // http://www.jqueryscript.net/menu/Dynamic-Table-of-Contents-Generator-With-jQuery-nestedToc.html
        $( document ).ready( function( ) {
        $('.toc').nestedToc({
    
        container: '.scriptText'
    
      });
      });
      </script>
</div>
</div>






<!-- *********************** MAIN DOCUMENT STARTS HERE *********************** -->



<!-- ************************************************************************* -->



<div class = "scriptText"> <!-- This div contains the main text -->








<!-- *********************** INSTALLATION *********************** -->
<h1 id="installation" class="noBackToTop" style = "padding-top: 20px;">How to install R and RStudio</h1>

<p>Below you find two documents that describe in detail how to install R and RStudio on Mac OS X, and on Windows 10. (In Chrome, you may click on the "fit to page" or the zoom buttons to enlarge the documents; in Firefox, you may have to activate Adobe Acrobat; of course, you can easily download the documents onto your hard drive.)</p>

<!-- A4 is  210 Ã— 297, thus the ratio is 1.414-->


<table style="width:100%">

	<tr>
		<th>Installation for Max OS X</th>
	</tr>

  <tr>
    <th>
		<object width="1200" height="850" data="pdfs/Installation Mac OS X.pdf"></object>
	</th>
	</tr>
<!-- Add empty row-->
	<td bgcolor="#FAFAFA" style="line-height:80px;" colspan=1>&nbsp;</td>
<tr>

		<th>Installation for Windows 10</th>
	<tr><th>
		<object width="1200" height="850" data="pdfs/Installation Windows 10.pdf"></object>
    
		
	</th> 

  </tr>
</table>




<h1 id="lecture1" class="noBackToTop">Lecture 1</h1>

<h2 id="lecture1_slides" class="noBackToTop">Slides for Lecture 1</h2>

<p> Below you can find the slides in pdf format for this lecture (which, of course, you can download if you want to make annotations). </p>



<table style="width:100%">

	<tr>
		<th>Slides for Lecture 1</th>
	</tr>

  <tr>
    <th>
		<object width="1200" height="880" data="pdfs/Practical programming - Lecture 1.pdf"></object>
	</th>
	</tr>


</table>


<h2 id="lecture1_codelive">&ldquo;Live&rdquo; code from Lecture 1</h2>

<p>And here you find the R code that we typed during the first lecture. You will also see the respective output from R (on yellow background). You have seen, for a very first time, the following concepts or objects:
<ul>
<li> Variables and the assignment of values to variables
<li> Variable types (numeric, character, logical)
<li> vectors
<li> the commands <code>seq()</code>, <code>rep()</code>, <code>cat()</code>, <code>paste()</code>, <code>paste0()</code>
<li> How to convert numeric values to character values
<li> How to make a very basic plot
</ul>

</p>

<p>Get &ldquo;live&rdquo; code as <a href="pdfs/Lec1_live.pdf" target = "_blank">pdf</a>.</p>

<!--begin.rcode


num = 5
num

alph = "a"
alph

class(num)
class(alph)
# Variables (like num and alph) can have
# several "types", e.g. numeric or character
# This can be checked by using the class command.

numchar = "5"
class(numchar)

# Some algebra
###############

5^2

x = exp(1)
x
y = log(x)
y

# Equality vs. equality, and Boolean variables
##############################################

i = 1
j = i
i = 2
j=i
j 

i = 1
i = i + 1

i <-1
i <-i+1
i

# = means assignment, not mathematical equality

i==j

z = i==j
z
class(z)

# Another data type is "logical", often also 
# called Boolean

# VECTORS
##########

a = c(2,5,90)
a

b = c("w", "o", "w")
b

cat(b)
cat(b, sep="")

# delete a variable
rm(a, b)

# Delete everything in working space

rm(list = ls())

###############################
x = 0:10
x

x = seq(from = 0,
        to = 10, 
        by = 0.5)
x

y = x^2
y

plot(x,y)
plot(x,y, type="l")

rep("Semester",6)

n = as.character(1:6)
n

paste(n, rep(". Semester",6))

paste0(n, rep(". Semester",6))


end.rcode-->




<h2 id="lecture1_homesolution">Solution of Home Assignment for Lecture 1</h2>

<p>Here you find the solution for the home assignment of Lecture 1.</p>

<!--begin.rcode

# Homework Lec1

# Plots of exponential function
##############################

# With a coarse grid
x = seq(0,50, 5)
y = exp(x)
plot(x, y, type = "l")

# With a fine grid
x = seq(0,50, 0.1)
y = exp(x)
plot(x, y, type = "l")

# And with a red curve
plot(x, y, type = "l", col = "red")


# Generating a vector with date information

# There are many possible solutions, here is one:

monthN = c(1:12, 1:12)

years = c(rep("2015", 12), rep("2016", 12))

text = rep(". Monat ", 24)

paste0(monthN, text, years)

end.rcode-->



<h1 id="lecture2">Lecture 2</h1>


<h2 id="lecture2_slides" class="noBackToTop">Slides for Lecture 2</h2>


<table style="width:100%">

	<tr>
		<th>Slides for Lecture 2</th>
	</tr>

  <tr>
    <th>
		<object width="1200" height="880" data="pdfs/Practical programming - Lecture 2.pdf"></object>
	</th>
	</tr>


</table>

<h2 id="lecture2_codelive">&ldquo;Live&rdquo; Code from Lecture 2</h2>

<p>Get &ldquo;live&rdquo; code as <a href="pdfs/Lec2_live.pdf" target = "_blank">pdf</a>.</p>

<!--begin.rcode


# Let's assemble a data.frame (=spreadsheet),
# This can be very big.
# This is the format we will read data into.

n = as.character(1:6)
semester = paste0(n, ". Semester")
semester

# Number of courses
l = length(semester)
l

#generate random vector with zeros and ones

set.seed(1) # Make sure we all draw the same numbers
randZeroOne = rbinom(l, 1, 0.5)

nCourses = 6-randZeroOne
nCourses

# Level of difficulty
diffLevels = c("hard", "medium", "easy")

set.seed(2837482)
difficulty = sample(diffLevels, l, replace = T)
difficulty

class(difficulty)

difficultyFac = as.factor(difficulty)
difficultyFac

#plot(difficulty) # This does not yield any sensible results
plot(difficultyFac)

#number of students
nStud = rpois(l, 30)
nStud


uni = rep("HSG", l)

bachelorProgram = data.frame(
  semester, nCourses, difficultyFac, 
  nStud, uni
)

############################################

# Lists are another data type
L0 = list(bachelorProgram = bachelorProgram,
          difficulty = difficultyFac)

L0

L1 = list(L0, bachelorProgram, "chaos")
L1


end.rcode-->

<h2 id="lecture2_homesolution">Solution of Home Assignment for Lecture 2</h2>


<!--begin.rcode


# Question 1

id = 1:1000

# Question 2

set.seed(8763)
gender = rbinom(1000,1, 0.5)
gender

# Question 3

set.seed(8763)
politViews = rnorm(1000, 5, 1)

hist(politViews)

mean(politViews)

# Question 4

characTypes = c("introvert", "extrovert", "nerdy")

charac = sample(characTypes, 1000, replace = T)

# Question 5

data = data.frame(id, gender, politViews, charac)



end.rcode-->




<!-- ####################################################### -->



<h1 id="lecture3">Lecture 3</h1>



<h2 id="lecture3_codelive" class="noBackToTop">&ldquo;Live&rdquo; Code from Lecture 3</h2>


<p>Please note that the last bits in the &ldquo;live&rdquo; code (under &ldquo;Optional Arguments&rdquo;) is incomplete. We will finish this during Lecture 4. If you prefer the &ldquo;live&rdquo; code as pdf, you can get it <a href="pdfs/Lec3_live.pdf" target = "_blank">here</a>.</p>

<!--begin.rcode

#############
# Functions #
#############

sayHello = function(name){
  paste0("Hello ", name, 
         ", how are you doing today?")
}

sayHello("Sabrina")
sayHello("Christian")

LETTERS

sayHello(LETTERS)




# A function that calculates saving needs for retirement
########################################################

# The input values for the calculation
spending = 5000
interestRate = 4
T = 30

# The stupid way to program... 
# (this does not even deserve the name "programming")

pvSpending = 5000/1.04^30
pvSpending

# A little smarter with using variables

pvSpending = spending/(1+interestRate/100)^T

# The smartest way: Using functions

saveFun = function(x, r, T){
  round(  x/(1+r/100)^T  )
}
saveFun(5000, 0, 30)

# Label arguments
#################

saveFun = function(spending, interestRate,
                   horizon){
    x = spending
    r = interestRate
    T = horizon
  round(  x/(1+r/100)^T  )
}

saveFun(spending = 5000, interestRate = 4,
        horizon = 30)

saveFun(horizon = 30, spending = 5000,
        interestRate = 4)

saveFun(30, 5000, 4)

# With labels you can change the order of the arguments,
# without labels, you cannot.

# Default values
#################

saveFun = function(spending = 5000, 
                   interestRate = 4,
                   horizon = 30){
  x = spending
  r = interestRate
  T = horizon
  round(  x/(1+r/100)^T  )
}

saveFun()

saveFun(spending = 1000)


# Optional arguments
####################

# !!! WARNING: THE CODE BELOW IS INCOMPLETE, 
#     WE WILL FINISH THIS THE NEXT TIME!!!!

saveFun = function(spending = 5000, 
                   interestRate = 4,
                   horizon = 30,
                   get.out.as.text = NULL){
  x = spending
  r = interestRate
  T = horizon
  out = round(  x/(1+r/100)^T  )
  
  if(  !is.null(get.out.as.text)  ){
    cat(sprintf("If you want to spend %s after %s years
and the interest rate is %s percent, 
you have to save %s.", x, T, r, out))
  }
  
  
}

x = 5000; T = 30; r = 4





end.rcode-->



<h2 id="lecture3_homesolution">Solution of Home Assignment for Lecture 3</h2>

<p>The suggested solution for the home assignment of Lecture 3 is available in <a href = "Homework_Lec3.R" download>this script file</a>. Note that there are many other possible solutions, some shorter and more elegant, some a little longer.</p>

<!-- ####################################################### -->



<h1 id="lecture4">Lecture 4</h1>

<p>In this lecture, we start with working on real data. In particular, we will consider data on Swiss Franc exchange rates and how the latter relate to Swiss imports and exports. You need to download the data from the website of the Swiss National Bank to your device before the lecture. You can find the instructions how to do so in <a href = "pdfs/Downloading SNB data and reading CSV files.pdf" target= "_blank">this document</a>.
</p>

<p>Just in case something really went wrong with downloading the data from the website of the Swiss National Bank, or with reading the data into R, you can get them 
directly in <code>RData</code> format <a href = "data/rawXrates.RData" download>here</a>. Do not open this data by double clicking. Rather copy it into the folder where you have the other data files for this course, and then use the <code>load()</code> command from within an R script.</p>




<p>In order to progress a little faster during class, I already prepared two R scripts:
<ul>
<li>Completing the savFun function from last time, with an optional argument <a href = "Lec4_forClass1.R" download>[download]</a>
<li>Reading data into R and working with them<a href = "Lec4_forClass2.R" download> [download]</a>
</ul>
</p>



<h2 id="lecture4_homeassignment">Data for Home Assignment for Lecture 4</h2>

<p>Try to get the following data &ldquo;clean&rdquo; into Excel:
<ul>
<li><a href = "data/toImport1.csv" download>Data set 1</a>
<li><a href = "data/toImport2.csv" download>Data set 2</a>
<li><a href = "data/toImport3.csv" download>Data set 3</a>
</ul>
</p>

<p>See StudyNet under &ldquo;Abgabe&rdquo; for further instructions.</p>



</div> <!-- end of div scriptText -->


<div class='markEnd'> </div> <!-- A last horizontal ruler at the end of the document-->

</div> <!-- end of content div -->

</body>
</html>
