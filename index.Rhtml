<!DOCTYPE html>
<html>

<!-- *********************** HEAD *********************** -->
<head>
<style type="text/css">
.knitr .inline {
  background-color: #f7f7f7;
  border:solid 1px #B0B0B0;
}
.error {
	font-weight: bold;
	color: #FF0000;
}
.warning {
	font-weight: bold;
}
.message {
	font-style: italic;
}
.source, .output, .warning, .error, .message {
	padding: 0 1em;
  border:solid 1px #F7F7F7;
}
.source {
  background-color: #f5f5f5;
}
.rimage .left {
  text-align: left;
}
.rimage .right {
  text-align: right;
}
.rimage .center {
  text-align: center;
}
.hl.num {
  color: #AF0F91;
}
.hl.str {
  color: #317ECC;
}
.hl.com {
  color: #AD95AF;
  font-style: italic;
}
.hl.opt {
  color: #000000;
}
.hl.std {
  color: #585858;
}
.hl.kwa {
  color: #295F94;
  font-weight: bold;
}
.hl.kwb {
  color: #B05A65;
}
.hl.kwc {
  color: #55aa55;
}
.hl.kwd {
  color: #BC5A65;
  font-weight: bold;
}
</style>
<style type="text/css">
.knitr .inline {
  background-color: #f7f7f7;
  border:solid 1px #B0B0B0;
}
.error {
	font-weight: bold;
	color: #FF0000;
}
.warning {
	font-weight: bold;
}
.message {
	font-style: italic;
}
.source, .output, .warning, .error, .message {
	padding: 0 1em;
  border:solid 1px #F7F7F7;
}
.source {
  background-color: #f5f5f5;
}
.rimage .left {
  text-align: left;
}
.rimage .right {
  text-align: right;
}
.rimage .center {
  text-align: center;
}
.hl.num {
  color: #AF0F91;
}
.hl.str {
  color: #317ECC;
}
.hl.com {
  color: #AD95AF;
  font-style: italic;
}
.hl.opt {
  color: #000000;
}
.hl.std {
  color: #585858;
}
.hl.kwa {
  color: #295F94;
  font-weight: bold;
}
.hl.kwb {
  color: #B05A65;
}
.hl.kwc {
  color: #55aa55;
}
.hl.kwd {
  color: #BC5A65;
  font-weight: bold;
}
</style>
<style type="text/css">
.knitr .inline {
  background-color: #f7f7f7;
  border:solid #B0B0B0;
}
.error {
	font-weight: bold;
	color: #FF0000;
}
.warning {
	font-weight: bold;
}
.message {
	font-style: italic;
}
.source, .output, .warning, .error, .message {
	padding: 0 1em;
  border:solid 1px #F7F7F7;
}
.source {
  background-color: #e0ffff; /*#f5f5f5;*/
}

.output {
  background-color: #ffffe6; 
}

.rimage .left {
  text-align: left;
}
.rimage .right {
  text-align: right;
}
.rimage .center {
  text-align: center;
}
.hl.num {
  color: #AF0F91;
}
.hl.str {
  color: #317ECC;
}
.hl.com {
  color: #AD95AF;
  font-style: italic;
}
.hl.opt {
  color: #000000;
}

/* Font of variable names*/
.hl.std {
  color: #585858;
}
.hl.kwa {
  color: #295F94;
  font-weight: bold;
}
.hl.kwb {
  color: #B05A65;
}
.hl.kwc {
  color: #55aa55;
}
.hl.kwd {
  color: #BC5A65;
  font-weight: bold;
}
</style>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="author" content="Prof. Dr. Johannes Binswanger" />
 
<title>Programming for Practical Data Analysis</title>

<!-- ******* LIBRARIES AND PLUGINS ******* -->

<!-- my own css file -->
<link rel="stylesheet" href="css/baseline.css" type="text/css" />

<!-- jquery, nestedToc, slidesjs ... -->


<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

<script src="js/jquery-nestedToc.js">// get nestedToc from http://www.jqueryscript.net/menu/Dynamic-Table-of-Contents-Generator-With-jQuery-nestedToc.html
</script>

<script src="js/jquery.slides.min.js"></script>


</head>

<!-- *********************** END OF HEAD *********************** -->

<body>
<!-- ************************************** -->
<!-- AUTOMATIC INSERTION OF "BACK TO TOP"-->
<script>
// Select all headers to prepend "back to top" link.
// However, exclude the first heading, and the author and date
// Do so by creating a class noBackToTop. It is possible to assign multiple classes to an element.
// See http://stackoverflow.com/questions/3015103/jquery-exclude-elements-with-certain-class-in-selector

//NOTE: It is very important to use .before and not .prepend below!!!
// If you use prepend, the TOC gets screwed as the text shows up there as well!!

$(document).ready(function(){
	// Automatic "back to top" before a new heading, but not when the heading is of class noBackToTop, because 
	// there is immediately a subheading
    $(":header:not('.noBackToTop')").before("<p><a href='#docHeader'; style = 'font-size:1em; color: #A0A0A0'>[Back to top]</a></p>");
	// The back to top at the end of the document
	 $(".scriptText").append("<p><a href='#docHeader' style = 'font-size:1em; color: #A0A0A0'>[Back to top]</a></p>");
	 
	 //Horizontal ruler
	 $("h1:not('.noBackToTop')").before("<div class='markEnd'> </div>");
	 
	 
	
});


</script>



<!-- ************************************** 
     **************************************
	 **************************************
	 
-->








<div id="content">

<!-- *********************** TITLE ITEMS *********************** -->

<div id="docHeader">
    <p class="title">Programming for Practical Data Analysis</p>
    <h4 class="author noBackToTop"><em>Johannes Binswanger, University of St. Gallen</em></h4>
    <h4 class="date noBackToTop"><em>Fall 2016</em></h4>
</div> <!-- end of docHeader div -->



<!-- *********************** TABLE OF CONTENT (TOC) *********************** -->

<!-- This contains a toggle button 
and the table of content -->

<div class="tocContainer">
     
<script>
//jQuery code for toggle button
$( document ).ready( function( ) {
$( ".TOCbutton" ).click(function() {
  $( ".tocToggleContainer" ).toggle();
});
});
</script>

<!-- the button -->
<button class="TOCbutton" style="color: #27738C;font-size: 20px;">Show/hide table of content</button>




</div>

<div class="tocToggleContainer">
<!-- This div is empty, for the toggle -->
</div>

<!-- The following div below has the same class as the previous!! And do not forget to add the particular styling about display. Note that the second div contains another div that contains the toc. This is to keep both the toc and the toggle work. It may not be necessary with the particular toc solution chosen here, but it is necessary for other toc solutions.
-->
    <div class="tocToggleContainer" style="display: none">
    <div class = "toc">
        <script>
        // This script is simply copied from 
        // http://www.jqueryscript.net/menu/Dynamic-Table-of-Contents-Generator-With-jQuery-nestedToc.html
        $( document ).ready( function( ) {
        $('.toc').nestedToc({
    
        container: '.scriptText'
    
      });
      });
      </script>
</div>
</div>






<!-- *********************** MAIN DOCUMENT STARTS HERE *********************** -->



<!-- ************************************************************************* -->



<div class = "scriptText"> <!-- This div contains the main text -->








<!-- *********************** INSTALLATION *********************** -->
<h1 id="installation" class="noBackToTop" style = "padding-top: 20px;">How to install R and RStudio</h1>

<p>Below you find two documents that describe in detail how to install R and RStudio on Mac OS X, and on Windows 10. (In Chrome, you may click on the "fit to page" or the zoom buttons to enlarge the documents; in Firefox, you may have to activate Adobe Acrobat; of course, you can easily download the documents onto your hard drive.)</p>

<!-- A4 is  210 Ã— 297, thus the ratio is 1.414-->


<table style="width:100%">

	<tr>
		<th>Installation for Max OS X</th>
	</tr>

  <tr>
    <th>
		<object width="1200" height="850" data="pdfs/Installation Mac OS X.pdf"></object>
	</th>
	</tr>
<!-- Add empty row-->
	<td bgcolor="#FAFAFA" style="line-height:80px;" colspan=1>&nbsp;</td>
<tr>

		<th>Installation for Windows 10</th>
	<tr><th>
		<object width="1200" height="850" data="pdfs/Installation Windows 10.pdf"></object>
    
		
	</th> 

  </tr>
</table>




<h1 id="lecture1" class="noBackToTop">Lecture 1</h1>

<h2 id="lecture1_slides" class="noBackToTop">Slides for Lecture 1</h2>

<p> Below you can find the slides in pdf format for this lecture (which, of course, you can download if you want to make annotations). </p>



<table style="width:100%">

	<tr>
		<th>Slides for Lecture 1</th>
	</tr>

  <tr>
    <th>
		<object width="1200" height="880" data="pdfs/Practical programming - Lecture 1.pdf"></object>
	</th>
	</tr>


</table>


<h2 id="lecture1_codelive">&ldquo;Live&rdquo; code from Lecture 1</h2>

<p>And here you find the R code that we typed during the first lecture. You will also see the respective output from R (on yellow background). You have seen, for a very first time, the following concepts or objects:
<ul>
<li> Variables and the assignment of values to variables
<li> Variable types (numeric, character, logical)
<li> vectors
<li> the commands <code>seq()</code>, <code>rep()</code>, <code>cat()</code>, <code>paste()</code>, <code>paste0()</code>
<li> How to convert numeric values to character values
<li> How to make a very basic plot
</ul>

</p>

<p>Get &ldquo;live&rdquo; code as <a href="pdfs/Lec1_live.pdf" target = "_blank">pdf</a>.</p>

<!--begin.rcode


num = 5
num

alph = "a"
alph

class(num)
class(alph)
# Variables (like num and alph) can have
# several "types", e.g. numeric or character
# This can be checked by using the class command.

numchar = "5"
class(numchar)

# Some algebra
###############

5^2

x = exp(1)
x
y = log(x)
y

# Equality vs. equality, and Boolean variables
##############################################

i = 1
j = i
i = 2
j=i
j 

i = 1
i = i + 1

i <-1
i <-i+1
i

# = means assignment, not mathematical equality

i==j

z = i==j
z
class(z)

# Another data type is "logical", often also 
# called Boolean

# VECTORS
##########

a = c(2,5,90)
a

b = c("w", "o", "w")
b

cat(b)
cat(b, sep="")

# delete a variable
rm(a, b)

# Delete everything in working space

rm(list = ls())

###############################
x = 0:10
x

x = seq(from = 0,
        to = 10, 
        by = 0.5)
x

y = x^2
y

plot(x,y)
plot(x,y, type="l")

rep("Semester",6)

n = as.character(1:6)
n

paste(n, rep(". Semester",6))

paste0(n, rep(". Semester",6))


end.rcode-->




<h2 id="lecture1_homesolution">Solution of Home Assignment for Lecture 1</h2>

<p>Here you find the solution for the home assignment of Lecture 1.</p>

<!--begin.rcode

# Homework Lec1

# Plots of exponential function
##############################

# With a coarse grid
x = seq(0,50, 5)
y = exp(x)
plot(x, y, type = "l")

# With a fine grid
x = seq(0,50, 0.1)
y = exp(x)
plot(x, y, type = "l")

# And with a red curve
plot(x, y, type = "l", col = "red")


# Generating a vector with date information

# There are many possible solutions, here is one:

monthN = c(1:12, 1:12)

years = c(rep("2015", 12), rep("2016", 12))

text = rep(". Monat ", 24)

paste0(monthN, text, years)

end.rcode-->



<h1 id="lecture2">Lecture 2</h1>


<h2 id="lecture2_slides" class="noBackToTop">Slides for Lecture 2</h2>


<table style="width:100%">

	<tr>
		<th>Slides for Lecture 2</th>
	</tr>

  <tr>
    <th>
		<object width="1200" height="880" data="pdfs/Practical programming - Lecture 2.pdf"></object>
	</th>
	</tr>


</table>

<h2 id="lecture2_codelive">&ldquo;Live&rdquo; Code from Lecture 2</h2>

<p>Get &ldquo;live&rdquo; code as <a href="pdfs/Lec2_live.pdf" target = "_blank">pdf</a>.</p>

<!--begin.rcode


# Let's assemble a data.frame (=spreadsheet),
# This can be very big.
# This is the format we will read data into.

n = as.character(1:6)
semester = paste0(n, ". Semester")
semester

# Number of courses
l = length(semester)
l

#generate random vector with zeros and ones

set.seed(1) # Make sure we all draw the same numbers
randZeroOne = rbinom(l, 1, 0.5)

nCourses = 6-randZeroOne
nCourses

# Level of difficulty
diffLevels = c("hard", "medium", "easy")

set.seed(2837482)
difficulty = sample(diffLevels, l, replace = T)
difficulty

class(difficulty)

difficultyFac = as.factor(difficulty)
difficultyFac

#plot(difficulty) # This does not yield any sensible results
plot(difficultyFac)

#number of students
nStud = rpois(l, 30)
nStud


uni = rep("HSG", l)

bachelorProgram = data.frame(
  semester, nCourses, difficultyFac, 
  nStud, uni
)

############################################

# Lists are another data type
L0 = list(bachelorProgram = bachelorProgram,
          difficulty = difficultyFac)

L0

L1 = list(L0, bachelorProgram, "chaos")
L1


end.rcode-->

<h2 id="lecture2_homesolution">Solution of Home Assignment for Lecture 2</h2>


<!--begin.rcode


# Question 1

id = 1:1000

# Question 2

set.seed(8763)
gender = rbinom(1000,1, 0.5)
gender

# Question 3

set.seed(8763)
politViews = rnorm(1000, 5, 1)

hist(politViews)

mean(politViews)

# Question 4

characTypes = c("introvert", "extrovert", "nerdy")

charac = sample(characTypes, 1000, replace = T)

# Question 5

data = data.frame(id, gender, politViews, charac)



end.rcode-->




<!-- ####################################################### -->



<h1 id="lecture3">Lecture 3</h1>



<h2 id="lecture3_codelive" class="noBackToTop">&ldquo;Live&rdquo; Code from Lecture 3</h2>


<p>Please note that the last bits in the &ldquo;live&rdquo; code (under &ldquo;Optional Arguments&rdquo;) is incomplete. We will finish this during Lecture 4. If you prefer the &ldquo;live&rdquo; code as pdf, you can get it <a href="pdfs/Lec3_live.pdf" target = "_blank">here</a>.</p>

<!--begin.rcode

#############
# Functions #
#############

sayHello = function(name){
  paste0("Hello ", name, 
         ", how are you doing today?")
}

sayHello("Sabrina")
sayHello("Christian")

LETTERS

sayHello(LETTERS)




# A function that calculates saving needs for retirement
########################################################

# The input values for the calculation
spending = 5000
interestRate = 4
T = 30

# The stupid way to program... 
# (this does not even deserve the name "programming")

pvSpending = 5000/1.04^30
pvSpending

# A little smarter with using variables

pvSpending = spending/(1+interestRate/100)^T

# The smartest way: Using functions

saveFun = function(x, r, T){
  round(  x/(1+r/100)^T  )
}
saveFun(5000, 0, 30)

# Label arguments
#################

saveFun = function(spending, interestRate,
                   horizon){
    x = spending
    r = interestRate
    T = horizon
  round(  x/(1+r/100)^T  )
}

saveFun(spending = 5000, interestRate = 4,
        horizon = 30)

saveFun(horizon = 30, spending = 5000,
        interestRate = 4)

saveFun(30, 5000, 4)

# With labels you can change the order of the arguments,
# without labels, you cannot.

# Default values
#################

saveFun = function(spending = 5000, 
                   interestRate = 4,
                   horizon = 30){
  x = spending
  r = interestRate
  T = horizon
  round(  x/(1+r/100)^T  )
}

saveFun()

saveFun(spending = 1000)


# Optional arguments
####################

# !!! WARNING: THE CODE BELOW IS INCOMPLETE, 
#     WE WILL FINISH THIS THE NEXT TIME!!!!

saveFun = function(spending = 5000, 
                   interestRate = 4,
                   horizon = 30,
                   get.out.as.text = NULL){
  x = spending
  r = interestRate
  T = horizon
  out = round(  x/(1+r/100)^T  )
  
  if(  !is.null(get.out.as.text)  ){
    cat(sprintf("If you want to spend %s after %s years
and the interest rate is %s percent, 
you have to save %s.", x, T, r, out))
  }
  
  
}

x = 5000; T = 30; r = 4





end.rcode-->



<h2 id="lecture3_homesolution">Solution of Home Assignment for Lecture 3</h2>

<p>The suggested solution for the home assignment of Lecture 3 is available in <a href = "Homework_Lec3.R" download>this script file</a>. Note that there are many other possible solutions, some shorter and more elegant, some a little longer.</p>

<!-- ####################################################### -->



<h1 id="lecture4">Lecture 4</h1>

<p>In this lecture, we start with working on real data. In particular, we will consider data on Swiss Franc exchange rates and how the latter relate to Swiss imports and exports. You need to download the data from the website of the Swiss National Bank to your device before the lecture. You can find the instructions how to do so in <a href = "pdfs/Downloading SNB data and reading CSV files.pdf" target= "_blank">this document</a>.
</p>

<!--
<p>Just in case something really went wrong with downloading the data from the website of the Swiss National Bank, or with reading the data into R, you can get them 
directly in <code>RData</code> format <a href = "data/rawXrates.RData" download>here</a>. Do not open this data by double clicking. Rather copy it into the folder where you have the other data files for this course, and then use the <code>load()</code> command from within an R script.</p>
-->

<!--

<p>In order to progress a little faster during class, I already prepared two R scripts:
<ul>
<li>Completing the savFun function from last time, with an optional argument <a href = "Lec4_forClass1.R" download>[download]</a>
<li>Reading data into R and working with them<a href = "Lec4_forClass2.R" download> [download]</a>
</ul>
</p>
-->



<h2 id="lecture4_codelive" >&ldquo;Live&rdquo; Code from Lecture 4</h2>

<p>If you prefer the &ldquo;live&rdquo; code as pdf, you can get it <a href="pdfs/Lec4_live.pdf" target = "_blank">here</a>.</p>


<!--begin.rcode


############################################
# LECTURE 4, Part 1: Completing function   #
# from last time with an optional argument #
############################################

# During Lecture 3 we worked on a function with an optional
# or "NULL" argument: if the argument get.out.as.text is not NULL,
# then the function saveFun would get the output as text.

# In this function, we introduced two new R functions:
# sprintf, and the conditional.


# sprintf
#########


x = 5000; T = 30; r = 4
out = round(  x/(1+r/100)^T  )
# Note that you can run several commands on one line, 
# separated by semicolons


sprintf("If you want to spend %s after %s years
and the interest rate is %s percent, 
you have to save %s.", x, T, r, out)


# Note: The s in "%s" means "string". See Section 8.2 in 
# "R for Everyone".

# If you want get rid of the editing symbols like "" or \n, you have
# to use the cat function


cat(sprintf("If you want\t to spend %s\n after %s years
and the\n interest\t rate is %s percent, 
you have to save %s.", x, T, r, out))




# Conditionals
##############

# See Chapter 9 in "R for Everyone"

arg = "yes"

if (arg ==  "no"){
  print("I have nothing to say :-(")
}


# So what if arg = "yes"?

arg = "yes"

if (arg ==  "no"){
  print("I have nothing to say :-(")
}

if (arg ==  "yes"){
  print("I have nothing to say :-)")
}


arg = "no"

if (arg ==  "no"){
  print("I have nothing to say :-(")
} else if (arg=="yes"){
  print(":-))")
}
    
# Be very careful with the positions of the curly brackets
# If they are not in the right position, you will get
# an error. This can sometimes be quite tricky.


# Now let's make a function of this

saySomething = function(arg){
  
  #copy/paste from above
  if (arg ==  "no"){
    print("I have nothing to say :-(")
  } else if (arg=="yes"){
    print(":-))")
  }
}

saySomething("no")
saySomething("yes")


# Now we go back to our savings function
########################################

a = NULL
b = "yes"
is.null(a)
is.null(b)

get.out.as.text = "yes"

saveFun = function(spending = 5000, 
                   interestRate = 4,
                   horizon = 30,
                   get.out.as.text = NULL){
  x = spending
  r = interestRate
  T = horizon
  out = round(  x/(1+r/100)^T  )
  
  if (is.null(get.out.as.text)){
    return(out)
    # everything in a function that comes after return is not executed
    # if return is executed...
  
  } else if (get.out.as.text == "yes"){
    cat(sprintf("If you want to spend %s after %s years
and the interest rate is %s percent, 
you have to save %s!", x, T, r, out))
  }
}
  
saveFun()
saveFun(get.out.as.text = "yes")

saveFun(spending = 5000, 
        interestRate = 1,
        horizon = 30,
        get.out.as.text = "yes")

  
saveFun(spending = 5000, 
        interestRate = -0.5,
        horizon = 30)





###########################################################################

###########################################################################


####################################################
# LECTURE 4, Part 2: Reading data from csv files   #
####################################################




# See Section 6.1 and 5.1 in "R for Everyone". 

rm(list = ls())

# Set the working directory to the folder
# where you have the csv files from the SNB


# On a Mac it may look like this
#setwd("/Users/Thomas/Dropbox/Programmierkurs/Data")

# On Windows it may look like this
#setwd("D:/Programmierkurs/Data")

# Note the forward slashes in the directory!!!!!


# Load the data... Which one
# works for you?

rawData = read.csv(file = "data/SNB Xrates downloaded.csv")

rawXrates = read.csv(file = "data/SNB Xrates downloaded clean.csv")

rawXrates = 
  read.csv(file = 
             "data/SNB Xrates downloaded clean.csv", 
           sep = ",")

rawXrates$XX = NA

# In my case, there are still the empty rows and columns. 
# However, even if you do not have them, you can execute 
# the below commands

# What is the type of rawXrates?
class(rawXrates)

# Get the names of the columns ("variables"
# in the statistical sense)
names(rawXrates)

# You can use the names to get a column


head(rawXrates["Date"])

# Use this trick to select only the variables we are interested in

varList = c("Date", "D0", "D1", "Value")

rawXrates = rawXrates[varList]

head(rawXrates)



end.rcode-->


<h2 id="lecture4_homeassignment">Data for Home Assignment for Lecture 4</h2>

<p>Try to get the following data &ldquo;clean&rdquo; into Excel:
<ul>
<li><a href = "data/toImport1.csv" download>Data set 1</a>
<li><a href = "data/toImport2.csv" download>Data set 2</a>
<li><a href = "data/toImport3.csv" download>Data set 3</a>
</ul>
</p>

<p>See StudyNet under &ldquo;Abgabe&rdquo; for further instructions.</p>


<!-- ############################################################### -->


<h1 id="lecture5">Lecture 5</h1>


<h2 id="lecture5_problemsReading" class="noBackToTop">Problems: What if some numbers are automatically converted to dates?</h2>

<p>During Lecture 5, several of you had the problem that some selective values of exchange rates were automatically converted into dates. This produced some rather bizarre-looking graphics of the time series of exchange rates. Furthermore, a few of you also still had problems getting the <code>OECD Main Economic Indicators</code> into R. I will probably write a little more on this later, but here are some quick fixes. Below, I just post the data in <code>RData</code> format. These files have never been opened in Excel, so they should not be infected by the mentioned problems.</p>



<p><ul>
<li><a href = "data/rawXrates.RData" download>SNB exchange rate data</a>
<li><a href = "data/rawExpImp.RData" download>SNB data on exports and imports</a> (for next lecture)
<li><a href = "data/OECD_MEI.RData" download>OECD MEI data</a> (for home assignment)
</ul></p>


<p>Download these data and put them into the folder where you have the other data for this course. Then proceed as follows (adjust the working directory to your own settings):

<!--begin.rcode

setwd("D:/Dropbox/Mac&Surf/Programmierkurs Dropb/Data")

load("rawXrates.RData")
head(rawXrates, 10)

load("rawExpImp.RData")
head(rawExpImp, 10)

load("OECD_MEI.RData")
head(OECD_MEI, 10)

end.rcode -->

<p>You should now be able to run the script file from Lecture 5 with that data (you may have to make some minor adjustments in the code).</p>

<h2 id="lecture5_codelive" >&ldquo;Live&rdquo; Code from Lecture 5</h2>

<p>Get &ldquo;live&rdquo; code as <a href="pdfs/Lec5_live.pdf" target = "_blank">pdf</a>.</p>


<!-- begin.rcode


#############################################
# LECTURE 5: Handling data and data.frames  #
#############################################


# We will continute working with the data sets for the SNB
# That you downloaded for Lecture 4. 

# This time, we are assuming that the data already look neat
# So no deletion of empty columns any more.
 
# Preparatory steps
###################

# Almost everytime you work with data, you should do the 
# following steps...

rm(list = ls()) # Empty workspace to start with a "clean sheet"

# REPLACE THE WORKING DIRECTORY BELOW WITH THE ONE FOR YOUR DEVICE
setwd("D:/Dropbox/Mac&Surf/Programmierkurs Dropb/Data")


# Read the data
###############

# Last time, we read the data like this:
rawXrates = read.csv(
  file = "SNB Xrates downloaded clean noEmptyCol.csv", sep = ",")

# For some of you, sep should take the value ";".

# However, for some of you, the column names may land in the first row,
# which is not the idea. So add "header = TRUE":
rawXrates = read.csv(file = 
   "SNB Xrates downloaded clean noEmptyCol.csv", 
       sep = ",", header = TRUE)



# Referring to columns in data.frames
#####################################

# There are (at least) two ways to refer to a column:

# rawXrates[["D0"]]
# rawXrates$D0

# For instance, you can use this for
# getting all the values in a column

length(unique(rawXrates$D0))
table(rawXrates$D0)


# or the type

class(rawXrates[["D0"]])

# Note the subtle difference between
class(rawXrates[["D0"]])
# and
class(rawXrates["D0"])

# Sometimes, this matters, sometimes not...
# For deleting empty columns, it does not.

# NOTE: Our data is in the so-called "long" format: all variables (in the statistical
# sense) are "stacked".

# The statistical variable names are a combination of D0 and D1.

# The SNB does not make it too easy to get the meaning of D0. But if you go
# to the Data Portal https://data.snb.ch/de/topics/ziredev#!/cube/devkum
# and download the data in Excel format (which, by the way, is useless for 
# reading the data into R), you get the meaning of the exchange rates.


# Converting data from "long" to "wide" and back to "long"
##########################################################

# See "R for Everyone", Section 12.3

# R comes with lots of "packages". For converting data from long to wide
# we need the package "reshape2"

# A package is intalled like this:
# install.packages("reshape2")
# Do this only once on your machine

# Everytime you use a package, you have to "call" or "load" it
library(reshape2)
# or
require(reshape2)


wide = dcast(rawXrates, # the data frame
             Date ~ # the variable that is to
               # 'IDENTIFY' ROWS of new
               # variables! Note the '~'!
               D0 + D1 , # the column(s) containing 
             # what you want to become
             # the new variable NAMES 
             value.var = "Value")  # column that contains the 
              # VALUES of the new variables
              # (often, you can ommit this)

# In short:
wide = dcast(rawXrates, Date ~ D0 + D1)

# Check out, what the following would do:
wide = dcast(rawXrates, Date ~ D0)
wide = dcast(rawXrates, Date ~ D1)


wide = dcast(rawXrates, Date ~ D0 + D1)

# Let's go back to "long". For the moment, this is more useful

long = melt(wide, id.vars = "Date", 
            value.name = "Value")

# D0 and D1 are now merged. We could change this, but
# we have more important things to do...


# Recoding date as numerical, and a unique time identifier
#########################################################

# Our data looks really enormously big
# Let's say we only care about data from 2000 on
# to start with... 

# The next lines of code are preparations for
# data from 2000 on (or any other year)


#install.packages("stringr")
library(stringr)

rawXrates$year = as.numeric(  
  substr(rawXrates$Date, start = 1, stop = 4)  )

rawXrates$month = as.numeric(  
  substr(rawXrates$Date, start = 6, stop = 7)  )


# A unique identifier for time
rawXrates$timeID = rawXrates$year + 
  (rawXrates$month-1)/12



# Eliminating rows and columns from data.frames
# (= selection of subsets of data)
################################################

# Let's get rid of all data before 2000

Xrates = rawXrates

Xrates = Xrates[Xrates$year>=2000, ]

# Now you can see why we needed the dates in numerical format!


# Next we get rid of other information we are not interested in...
unique(Xrates$D0)

Xrates = Xrates[Xrates$D0 == "M0", ]

# Let's select only Euro exchange rates

# How is the EUR coded? For a factor
unique(Xrates$D1)
# does sometimes not work so well. In that case, use
levels(Xrates$D1)

Xrates = Xrates[Xrates$D1 == "EUR1", ]


plot(Xrates$timeID, Xrates$Value, 
     type = "l", col = "red3")



# You can also use the subset command

XratesAlt = subset(rawXrates, 
      year >= 2000 & D0 == "M0"  & D1 == "EUR1",
       select = c(timeID, D1, Value))

# And if we again converted the dates, we could select data >= 2010

# Remove objects we no longer need

rm(long, wide, XratesAlt)


# Analyze the correlation between the USD and EUR exchange rate
###############################################################



data = subset(rawXrates, 
        (D1 == "EUR1" | D1 == "USD1") & 
          D0 == "M0" &
          timeID >= 2000 ,
        select = c("timeID", "D1", "Value"))

# Bring data into wide format
library(reshape2)
data = dcast(data, timeID ~ D1, value.var = "Value")


# Make a plot
matplot(data$timeID, cbind(data$EUR1, data$USD1), 
        type = "l", xlab = "Time", ylab = "EUR, USD", col = c("red3", "turquoise"))
grid()
legend('topright', inset=.05, legend = c("EUR", "USD"),
       lty = 1, col = c("red3", "turquoise"))

# Correlation
cor(data$EUR1, data$USD1)

# Run a regression
reg0 = lm(data$USD1 ~ data$EUR1)
summary(reg0)


end.rcode-->











</div> <!-- end of div scriptText -->


<div class='markEnd'> </div> <!-- A last horizontal ruler at the end of the document-->

</div> <!-- end of content div -->

</body>
</html>
